/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isLeaf(TreeNode node) {
        return node.left == null && node.right == null;
    }

    public boolean hasSum(TreeNode node, int currSum, int targetSum) {
        // currSum - префиксный массив
        if (node == null) {
            return false;
        }

        // если лист и дает нужную сумму, то мы нашли ответ
        if (isLeaf(node) && node.val + currSum == targetSum) {
            return true;
        }

        boolean isLeftSubTreeHasSum = hasSum(node.left, currSum + node.val, targetSum);
        boolean isRightSubTreeHasSum = hasSum(node.right, currSum + node.val, targetSum);
        return isLeftSubTreeHasSum || isRightSubTreeHasSum;
    }


    public boolean hasPathSum(TreeNode root, int targetSum) {
        return hasSum(root, 0, targetSum);
    }
}
